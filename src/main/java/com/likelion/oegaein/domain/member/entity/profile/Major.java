package com.likelion.oegaein.domain.member.entity.profile;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum Major {
    PHILOSOPHY("글로벌", "인문대학", "철학과"),
    HISTORY("글로벌", "인문대학", "사학과"),
    LINGUISTICS("글로벌", "인문대학", "언어인과학과"),
    KC("글로벌", "인문대학", "지식콘텐츠학부"),
    EIT("글로벌", "통번역대학", "영어통번역학"),
    GIT("글로벌", "통번역대학", "독일어통번역학과"),
    SIT("글로벌", "통번역대학", "스페인어통번역학과"),
    IIT("글로벌", "통번역대학", "이탈리어통번역학과"),
    CIT("글로벌", "통번역대학", "중국어통번역학과"),
    JIT("글로벌", "통번역대학", "일본어통번역학과"),
    AIT("글로벌", "통번역대학", "아랍어통번역학과"),
    MIT("글로벌", "통번역대학", "말레이·인도네시아어통번역학과"),
    TIT("글로벌", "통번역대학", "태국어통번역학과"),
    POLISH("글로벌", "동유럽학대학", "폴란드어과"),
    ROMANIAN("글로벌", "동유럽학대학", "루마니아어과"),
    CZECH("글로벌", "동유럽학대학", "체코·슬로바키아어과"),
    HUNGARIAN("글로벌", "동유럽학대학", "헝가리어과"),
    SLAVIC("글로벌", "동유럽학대학", "세르비아·크로아티아어과"),
    UKRAINE("글로벌", "동유럽학대학", "우크라이나어과"),
    FRANCE("글로벌", "국제지역대학", "프랑스학과"),
    BRAZIL("글로벌", "국제지역대학", "브라질학과"),
    GREECE("글로벌", "국제지역대학", "그리스·불가리아학과"),
    INDIA("글로벌", "국제지역대학", "인도학과"),
    CENTRALASIA("글로벌", "국제지역대학", "중앙아시아학과"),
    AFRICA("글로벌", "국제지역대학", "아프리카학부"),
    RUSSIA("글로벌", "국제지역대학", "러시아학과"),
    KOREA("글로벌", "국제지역대학", "한국학과"),
    IB("글로벌", "경상대학", "국제경영학과"),
    ECON_("글로벌", "경상대학", "경제학과"),
    MIS("글로벌", "경상대학", "경영정보학과"),
    GBT("글로벌", "경상대학", "Global Business&Technology학부"),
    IF("글로벌", "경상대학", "국제금융학과"),
    MATH("글로벌", "자연과학대학", "수학과"),
    STAT("글로벌", "자연과학대학", "통계학과"),
    PHYSICS("글로벌", "자연과학대학", "전자물리학과"),
    ENVI("글로벌", "자연과학대학", "환경학과"),
    BIO("글로벌", "자연과학대학", "생명공학과"),
    CHEMISTRY("글로벌", "자연과학대학", "화학과"),
    CSE("글로벌", "공과대학", "컴퓨터공학부"),
    CSE_("글로벌", "공과대학", "컴퓨터·전자시스템공학부"),
    ICE("글로벌", "공과대학", "정보통신공학과"),
    SC("글로벌", "공과대학", "반도체전자공학부(반도체공학전공)"),
    EE("글로벌", "공과대학", "반도체전자공학부(전자공학전공)"),
    IME("글로벌", "공과대학", "산업경영공학과"),
    INGENIUM("글로벌", "융합인재대학", "융합인재학부"),
    DICON("글로벌", "Culture&Technology융합대학", "디지털콘텐츠학부"),
    TW("글로벌", "Culture&Technology융합대학", "투어리즘&웰니스학부"),
    SPORT("글로벌", "Culture&Technology융합대학", "글로벌스포츠산업학부"),
    AIDATA("글로벌", "AI융합대학", "AI데이터융합학부"),
    AIFINANCE("글로벌", "AI융합대학", "Finance&AI융합학부"),
    BME("글로벌", "바이오메디컬공학부", "바이오메디컬공학부"),
    GOMD("글로벌", "글로벌자유전공학부", "글로벌자유전공학부"),
    CC("글로벌", "기후변화융합학부", "기후변화융합학부"),
    ELLT("서울", "영어대학", "ELLT학과"),
    ELC("서울", "영어대학", "영미문학·문화학과"),
    EICC("서울", "영어대학", "EICC학과"),
    ENG("서울", "영어대학", "영어학부"),
    FRENCH("서울", "서양어대학", "프랑스어학부"),
    GERMAN("서울", "서양어대학", "독일어과"),
    RUSSIAN("서울", "서양어대학", "노어과"),
    SPANISH("서울", "서양어대학", "스페인어과"),
    ITALIC("서울", "서양어대학", "이탈리아어과"),
    PORT("서울", "서양어대학", "포르투갈어과"),
    NEDS("서울", "서양어대학", "네덜란드어과"),
    SCAN("서울", "서양어대학", "스칸디나비아어과"),
    MAIN("서울", "아시아언어문화대학", "말레이·인도네시아어과"),
    ARABIC("서울", "아시아언어문화대학", "아랍어과"),
    THAI("서울", "아시아언어문화대학", "태국어과"),
    VIETNAM("서울", "아시아언어문화대학", "베트남어과"),
    INDIAN("서울", "아시아언어문화대학", "인도어과"),
    TURKAZERI("서울", "아시아언어문화대학", "터키·아제르바이잔어과"),
    IRAN("서울", "아시아언어문화대학", "페르시아어·이란학과"),
    MONGOLIAN("서울", "아시아언어문화대학", "몽골어과"),
    CLLC("서울", "중국학대학", "중국언어문화학부"),
    CFAC("서울", "중국학대학", "중국외교통상학부"),
    JLLC("서울", "일본학대학", "일본언어문화학부"),
    IJS("서울", "일본학대학", "융합일본지역학부"),
    PSD("서울", "사회과학대학", "정치외교학과"),
    PA("서울", "사회과학대학", "행정학과"),
    MEDIA("서울", "사회과학대학", "미디어커뮤니케이션학부"),
    IEL("서울", "상경대학", "국제통상학과"),
    ECON("서울", "상경대학", "경제학부"),
    BIZ("서울", "경영대학", "경영학부"),
    E_EDU("서울", "사범대학", "영어교육과"),
    K_EDU("서울", "사범대학", "한국어교육과"),
    F_EDU("서울", "사범대학", "외국어교육학부(프랑스어교육전공)"),
    G_EDU("서울", "사범대학", "외국어교육학부(독일어교육전공)"),
    C_EDU("서울", "사범대학", "외국어교육학부(중국어교육전공)"),
    EDU("서울", "사범대학", "교육학전공"),
    P_EDU("서울", "사범대학", "체육학전공"),
    LANGAI("서울", "AI융합학부", "Language&AI 융합학부"),
    SSAI("서울", "AI융합학부", "Social Science&AI 융합학부"),
    IS("서울", "국제학부", "국제학부"),
    LD("서울", "Language&Diplomacy학부", "LD학부"),
    LT("서울", "Language&Trade학부", "LT학부"),
    KFL("서울", "KFL학부", "KFL학부");

    private final String campus;
    private final String college;
    private final String major;

    @JsonCreator
    public static Major deserializer(String value) {
        for(Major major : Major.values()){
            if(major.getMajor().equals(value)) {
                return major;
            }
        }
        return null;
    }

    @JsonValue
    public String serializer(){
        return major;
    }
}
